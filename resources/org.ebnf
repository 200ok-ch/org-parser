S = line*

<line> = (empty-line / head-line / affiliated-keyword-line / keyword-line / todo-line / greater-block-begin-line / greater-block-end-line / dynamic-block-begin-line / dynamic-block-end-line / drawer-begin-line / drawer-end-line / list-item-line / footnote-line / literal-line / content-line) eol

empty-line = "" | #"\s+"
(* TODO same as title text below. *)
content-line = #".*"
(* content-line = text *)

<eol> = <#'\n|$'>
(* TODO remove <> to enable use where the spaces are actual needed *)
<s> = <#"[\t ]+">
<word> = #"[^\r\n\s$]+"

head-line = stars [s priority] [s comment-token] s title [s tags]
stars = #'\*+'
priority = <"[#"> #"[A-Z]" <"]">
comment-token = <"COMMENT">
(* TODO title text is more than just words; e.g. formatting and timestamps are allowed. *)
title = !tags word {s !tags word}
tags = <':'> ( tag <':'> )+
<tag> = #'[a-zA-Z0-9_@#%]+'

(* https://orgmode.org/manual/Literal-Examples.html *)
(* TODO need to preserve leading space? *)
literal-line = ll-leading-space <':'> ll-text
ll-leading-space = #"[\t ]*"
ll-text = #".*"

affiliated-keyword-line = <"#+"> (key | attr) <": "> value
optional = <"["> optional-value <"]">
value = #"[^\]\n]+"
<optional-value> = #"[^\]\n]+"
key = "HEADER" | "NAME" | "PLOT" | (("RESULTS" | "CAPTION") [ optional ]) | "AUTHOR" | "DATE" | "TITLE"
attr = <"ATTR_"> backend
backend = #"[a-zA-Z0-9-_]+"

todo-line = <"#+TODO: "> states
<states> = todo-state {s todo-state} <s "|" s> done-state {s done-state}
todo-state = #"[A-Z]+"
done-state = #"[A-Z]+"

greater-block-begin-line = <"#+BEGIN_"> greater-block-name [s greater-block-parameters]
greater-block-name = anything-but-whitespace
greater-block-parameters = anything-but-newline

<anything-but-whitespace> = #"[^\r\n\s$]+"
<anything-but-newline> = #"[^\n$]+"

greater-block-end-line = <"#+END_"> greater-block-name

drawer-begin-line = <":"> drawer-name <":">
drawer-name = #"[a-zA-Z0-9-_]+"
drawer-end-line = <":END:">

dynamic-block-begin-line = <'#+BEGIN: '> dynamic-block-name [s dynamic-block-parameters]
dynamic-block-end-line = <'#+END:'>

dynamic-block-name = anything-but-whitespace
dynamic-block-parameters = anything-but-newline

footnote-line = <'['> footnote-label <'] '> footnote-contents
footnote-label = (number | <'fn:'> footnote-word)
<number> = #"\d+"
<footnote-word> = #"[a-zA-Z0-9-_]+"
(* TODO footnote-context should be text *)
footnote-contents = anything-but-newline

list-item-line = ( list-item-bullet | list-item-counter list-item-counter-suffix ) <" "> (list-item-checkbox <" "> list-item-contents / list-item-contents)
list-item-bullet = #"[*\-+]"
list-item-contents = anything-but-newline
list-item-counter = #"(\d+|[a-zA-Z])"
list-item-counter-suffix = #"[.)]"
list-item-checkbox = <"["> list-item-checkbox-state <"]">
(* CHECK-BOX is either a single whitespace character, a “X” character
or a hyphen, enclosed within square brackets. *)
list-item-checkbox-state = #"[ \-X]"

keyword-line = <'#+'> keyword-key <':'> [<' '> keyword-value]
keyword-key = #"[^\s:]+"
keyword-value = anything-but-newline

node-property-line = <':'> node-property-name [node-property-plus] <':'> [<' '> node-property-value]
node-property-name = #"[^\s:+]+"
node-property-plus = <"+">
(* TODO footnote-context should be text *)
node-property-value = anything-but-newline


(* timestamps
   https://orgmode.org/worg/dev/org-element-api.html

   The symbol names are carefully chosen as a trade-off between
   shortness and consistency. They have a prefix, e.g. ts-mod-* for
   "timestamp modifier", to not get name colissions with other org
   mode syntax elements.

   We do not try to reproduce the same structure and symbol names as
   in the org mode spec because

   - it's not possible, e.g. :raw-value cannot be preserved with
     instaparse (to my understanding)
   - split up a date or time in its parts does not make much sense in
     a high-level programming language
   - e.g. values of :type, :repeater-type, :warning-type cannot be
     constructed with instaparse (to my understanding)

   Currently not supported: diary format from the Emacs Calendar package
   https://orgmode.org/manual/Timestamps.html

   *)


timestamp = timestamp-active / timestamp-inactive

(* TODO How does that work out: :ts-inner appearing two times in :timestamp-active.
        And if it works in clojure, does it also work in JS hashes (parse result)? *)

timestamp-active   = <'<'> (ts-inner / ts-inner-span) <'>'> / <'<'> ts-inner <'>--<'> ts-inner <'>'>

timestamp-inactive = <'['> (ts-inner / ts-inner-span) <']'> / <'['> ts-inner <']--['> ts-inner <']'>

(* a single point in time *)
ts-inner = ts-inner-w-time ts-modifiers / ts-inner-wo-time ts-modifiers

(* a time span *)
ts-inner-span = ts-inner-w-time <'-'> ts-time ts-modifiers

ts-inner-w-time  = ts-date [<' '+> ts-day] <' '+> ts-time
ts-inner-wo-time = ts-date [<' '+> ts-day]

ts-date = #"\d{4}-\d{2}-\d{2}"

(* It is possible to implement stricter rules, e.g. regex [012]?\d for hours.
   However, it would add complexity and date/time must be validated at
   a higher level anyway. Additionally, orgmode C-c C-c seems to add
   date and time; if time is "too big" and points to the next day, the
   timestamp date is updated accordingly. *)
ts-time = #"\d{1,2}:\d{2}(:\d{2})?([AaPp][Mm])?"

(* TODO Is there a class for letters? *)
(* TODO Does \s also match \n\r? If yes (like in JS), there is redundant \r\n in code above. *)
ts-day = #"[^\d\s>\]]+"

(* Reapeaters and warnings are described here:
   https://orgmode.org/manual/Repeated-tasks.html *)
ts-modifiers = Epsilon | (<' '+> ts-repeater [<' '+> ts-warning]) | (<' '+> ts-warning [<' '+> ts-repeater])

ts-repeater = ts-repeater-type ts-mod-value ts-mod-unit [<'/'> ts-mod-at-least]
ts-warning  = ts-warning-type  ts-mod-value ts-mod-unit

(* See https://orgmode.org/manual/Tracking-your-habits.html *)
ts-mod-at-least = ts-mod-value ts-mod-unit

ts-repeater-type = ('+'|'++'|'.+')
ts-warning-type  = ('-'|'--')

ts-mod-value = #'\d+'
ts-mod-unit = #'[hdwmy]'





(* text is any orgmode text that can contain markup, links, footnotes, timestamps, ...

   It can be a full line or part of a line (e.g. in title, lists, property values, tables, ...)

 *)

(* TODO footnote must come before link *)
text = #".*" / link




(* Hyperlinks
   https://orgmode.org/guide/Hyperlinks.html
   https://orgmode.org/manual/Link-Format.html

   URIs in text, optionally wrapped in <>, are recognized as links.
   The general link format is [[]] and [[][]].

 *)

(* Any text inside link brackets [...] *)
(* TODO link and description must support backslash escape for ], [, (and \) *)
<link-inside> = #"[^]]*"

link-format = <'[['> link <']]'> / <'[['> link <']['> link-description <']]'>

(* > If the link does not look like a URL, it is considered to be internal in the current file.
   - from orgmode guide. Hence the ordered alternatives: *)
link = link-ext / link-int
(* TODO does description must support markup? *)
link-description = link-inside

(* External Links
   https://orgmode.org/manual/External-Links.html
   TODO compare to orgmode source/regexes?
 *)
link-ext = link-ext-file / link-ext-other / link-ext-web

(* TODO missing: backslash escapes, ssh support *)
(* TODO link-text-file-location parsed? no because link-inside is
        greedy. temporary fix: parse filenames without colon: *)
<link-inside-filename> = #"[^]:]*"
link-ext-file = ( <'file:'> | & #"\.?/" ) link-inside-filename [ link-ext-file-location ]
<link-ext-file-location> = <'::'> ( link-file-loc-lnum / link-file-loc-headline / link-file-loc-customid / link-file-loc-string )
link-file-loc-lnum = #"\d+"
link-file-loc-headline = <'*'> link-inside
link-file-loc-customid = <'#'> link-inside
link-file-loc-string = link-inside

link-ext-other = link-url-scheme <':'> link-url-rest
link-url-scheme = #"[a-z]+"
link-url-rest = link-inside

(* Web address without http(s) protocol
   from https://stackoverflow.com/a/3809435 *)
link-ext-web = #"[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)"

(* Internal Links
   https://orgmode.org/manual/Internal-Links.html

   Here, link-file-loc-string works different than in link-ext-file:
   It is not text search but a link to <<id>> or #+NAME: id. See manual.
 *)
link-int = link-file-loc-headline / link-file-loc-customid / link-file-loc-string